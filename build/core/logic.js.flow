// @flow

import {defaults} from "./defaults";
import {selectionStrategies, foldStrategies, clickStrategies} from "./strategies";
import {wrapEvents, nodeEvents} from "./dragndrop";
import {css, array, tree} from "@bosket/tools";
declare class Class0 {

  inputs: {get: () => Input};
  outputs: Object;
  refresh: () => void;
  state: {get: () => Object, set: (_: Object) => void};
  constructor(inputs: {get: () => Input}, outputs: Object, state: {get: () => Object, set: (_: Object) => void}, refresh: () => void): void;
}
declare class Class1 extends UIEvent {

  altKey: boolean;
  charCode: number;
  code: string;
  ctrlKey: boolean;
  isComposing: boolean;
  key: string;
  keyCode: number;
  location: number;
  metaKey: boolean;
  repeat: boolean;
  shiftKey: boolean;
  which: number;
  getModifierState(keyArg?: string): boolean;
}
declare class Class2 extends UIEvent {

  altKey: boolean;
  button: number;
  buttons: number;
  clientX: number;
  clientY: number;
  ctrlKey: boolean;
  metaKey: boolean;
  movementX: number;
  movementY: number;
  offsetX: number;
  offsetY: number;
  pageX: number;
  pageY: number;
  region: ?string;
  relatedTarget: ?EventTarget;
  screenX: number;
  screenY: number;
  shiftKey: boolean;
  constructor(typeArg: string, mouseEventInit?: {altKey?: boolean, button?: number, buttons?: number, clientX?: number, clientY?: number, ctrlKey?: boolean, metaKey?: boolean, region?: string | null, relatedTarget?: string | null, screenX?: number, screenY?: number, shiftKey?: boolean}): void;
  getModifierState(keyArg: string): boolean;
}
declare export class RootNode extends Class0<mixed /* UNEXPECTED TYPE: ExistsT */> {

  filterTree: (input: string) => null | null | Map<T, mixed /* UNEXPECTED TYPE: ExistsT */>;
  mixCss: (prop: string) => any;
  modifiers: {} | {control: boolean, meta: boolean, shift: boolean};
  onKey: (event: Class1) => void;
  onSelect: (item: Object, ancestors: Array<Object>, neighbours: Array<Object>) => any;
  wrapDragNDrop: () => any;
}
export type RootNodeInput = {category: string, css: {[key: string]: string}, dragndrop?: Object, model: Array<Object>, search?: (_: string) => (_: Object) => boolean, selection: Array<Object>, strategies: Object};
declare export class TreeNode extends Class0<mixed /* UNEXPECTED TYPE: ExistsT */> {

  getDragEvents: (item: ?Object, condition?: boolean) => {} | {draggable: null | void, onDragEnd: null | void, onDragEnter: any, onDragLeave: any, onDragOver: any, onDragStart: null | void, onDrop: any};
  hasChildren: (item: Object) => any;
  isAsync: (item: ?Object) => boolean;
  isDisabled: (item: Object) => any | boolean;
  isDraggable: (item: ?Object) => null | void;
  isDroppable: (item: ?Object) => any;
  isFolded: (item: Object) => boolean;
  isSelected: (item: Object) => boolean;
  liCss: (item: Object) => string;
  mixCss: (prop: string) => any;
  onClick: (item: Object) => (event: Class2) => void;
  pending: Array<Object | Object>;
  ulCss: () => string;
  unwrapPromise: (item: Object) => Promise<mixed>;
  onOpener(item: Object): (event: Class2) => void;
}
export type TreeNodeInput = {ancestors: Array<Object>, async?: (_: (_: mixed) => Promise<Array<Object>>) => Promise<Array<Object>>, category: string, css: {[key: string]: string}, depth?: number, disabled?: (_: Object) => boolean, dragndrop: Object, model: Array<Object>, onSelect: (item: Object, ancestors: Array<Object>, neighbours: Array<Object>) => void, selection: Array<Object>, strategies?: Object};
