{"version":3,"sources":["../../../src/react/components/TreeView.js"],"names":["React","RootNode","defaults","withLabels","combine","withListener","TreeViewNode","TreeViewBaseClass","props","ancestors","state","search","filtered","onSearch","evt","currentTarget","HTMLInputElement","input","value","setState","rootNode","filterTree","_props","get","_outputs","onSelect","onDrag","dragndrop","drag","onOver","over","onEnter","enter","onLeave","leave","onDrop","drop","onCancel","cancel","_state","set","s","forceUpdate","keyDownListener","subscribe","onKey","keyUpListener","wrappedDragNDrop","wrapDragNDrop","nextProps","update","key","defaultsMix","prevProps","model","sort","searchBar","mixCss","labels","trim","PureComponent","TreeView","eventType","propName","autoMount"],"mappings":"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","file":"TreeView.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { RootNode, defaults } from \"@bosket/core\"\nimport { withLabels, combine, withListener } from \"../traits\"\nimport { TreeViewNode } from \"./TreeViewNode\"\n\nimport type { Key } from \"react\"\nimport type { RootNodeInput } from \"../../core/logic\"\n\nexport type TreeViewProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (newSelection: Object[], item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    display?:           (item: Object, inputs: Object) => any,\n    unique?:            Object => Key,\n    strategies?:        Object,\n    sort?:              (Object, Object) => number,\n    disabled?:          Object => boolean,\n    search?:            string => Object => boolean,\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    dragndrop?:         Object,\n    openerOpts?:        { position: \"none\" | \"left\" | \"right\" },\n    labels?:            Object,\n    css?:               { [key: string]: string },\n    transition?:        Object,\n    keyDownListener?:   Object,\n    keyUpListener?:     Object\n}\ntype TreeViewState = {\n    search: string,\n    filtered: null | Map<Object, *>\n}\n\nclass TreeViewBaseClass extends React.PureComponent<TreeViewProps, TreeViewState> {\n\n    /* Data & lifecycle */\n    rootNode: RootNode\n    defaultsMix: Object\n    wrappedDragNDrop: Object\n    ancestors = []\n\n    state : TreeViewState = {\n        search: \"\",\n        filtered: null\n    }\n\n    constructor(props: TreeViewProps) {\n        super(props)\n\n        const _props = {\n            get: () : RootNodeInput => ({ ...defaults, ...this.props })\n        }\n        const _outputs = {\n            onSelect:   this.props.onSelect,\n            onDrag:     this.props.dragndrop && this.props.dragndrop.drag,\n            onOver:     this.props.dragndrop && this.props.dragndrop.over,\n            onEnter:    this.props.dragndrop && this.props.dragndrop.enter,\n            onLeave:    this.props.dragndrop && this.props.dragndrop.leave,\n            onDrop:     this.props.dragndrop && this.props.dragndrop.drop,\n            onCancel:   this.props.dragndrop && this.props.dragndrop.cancel\n        }\n        const _state = {\n            get: () => this.state,\n            set: (s: Object) => this.setState(s)\n        }\n\n        this.rootNode = new RootNode(\n            _props,\n            _outputs,\n            _state,\n            this.forceUpdate\n        )\n\n        if(props.keyDownListener) props.keyDownListener.subscribe(this.rootNode.onKey)\n        if(props.keyUpListener) props.keyUpListener.subscribe(this.rootNode.onKey)\n        this.wrappedDragNDrop = this.rootNode.wrapDragNDrop()\n    }\n\n    /* Events */\n\n    onSearch = (evt: Event & { currentTarget: HTMLButtonElement }) => {\n        if(evt.currentTarget instanceof HTMLInputElement) {\n            const input = evt.currentTarget.value\n            this.setState({\n                search: input,\n                filtered: this.rootNode.filterTree(input)\n            })\n        }\n    }\n\n    /* Rendering */\n\n    componentWillReceiveProps(nextProps) {\n        let update = false\n        for(const key in defaults) {\n            if(nextProps[key] !== this.props[key]) {\n                update = true\n                break\n            }\n        }\n        if(update)\n            this.defaultsMix = { ...defaults, ...nextProps }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.model !== this.props.model) {\n            this.setState({\n                filtered: this.rootNode.filterTree(this.state.search)\n            })\n        }\n    }\n\n    render() {\n        const sort = this.props.sort\n        const props : any = this.defaultsMix || { ...defaults, ...this.props }\n\n        const searchBar = !this.props.search ? null :\n            <input type=\"search\" className={ this.rootNode.mixCss(\"search\") }\n                value={ this.state.search }\n                placeholder={ this.props.labels && this.props.labels[\"search.placeholder\"] }\n                onChange={ this.onSearch } />\n\n        return (\n            <div className={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode\n                    { ...props }\n                    model={ sort ? this.props.model.sort(sort) : this.props.model }\n                    filteredModel={ this.state.filtered }\n                    onSelect={ this.rootNode.onSelect }\n                    dragndrop={ this.wrappedDragNDrop }\n                    ancestors={ this.ancestors }\n                    sort={ sort }\n                    folded={ false }\n                    searched={ !!this.state.search.trim() }>\n                </TreeViewNode>\n            </div>\n        )\n    }\n}\n\n\nexport const TreeView = combine(\n    withLabels(defaults.labels),\n    withListener({ eventType: \"keyup\", propName: \"keyUpListener\", autoMount: true }),\n    withListener({ eventType: \"keydown\", propName: \"keyDownListener\", autoMount: true })\n)(TreeViewBaseClass)\n"]}