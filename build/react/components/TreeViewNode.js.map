{"version":3,"sources":["../../../src/react/components/TreeViewNode.js"],"names":["React","array","TreeNode","withTransition","TreeViewNodeBaseClass","props","ancestorsMap","Map","state","unfolded","_props","get","_state","set","s","setState","node","_unmounted","forceUpdate","model","Array","forEach","item","ancestors","nextProps","newMap","lastVal","hasChildren","isAsync","childModel","category","filteredModel","isFolded","pending","contains","unwrapPromise","sort","depth","OpenerComponent","openerOpts","position","mixCss","onOpener","folded","display","unique","loading","opener","list","filter","searched","has","m","map","idx","result","liCss","getDragEvents","onClick","renderOpener","renderSubtree","ulCss","PureComponent","TreeViewNode","key"],"mappings":"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","file":"TreeViewNode.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { array } from \"@bosket/tools\"\nimport { TreeNode } from \"@bosket/core\"\nimport { withTransition } from \"../traits\"\n\nimport type { Key } from \"react\"\nimport type { TreeNodeInput } from \"@bosket/core\"\n\ntype TreeViewNodeProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    ancestors:          Object[],\n    strategies?:        Object,\n    disabled?:          Object => boolean,\n    dragndrop?:         Object,\n    css?:               { [key: string]: string },\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    depth?:             number,\n    sort?:              (Object, Object) => number,\n    unique?:            Object => Key,\n    display?:           (Object, Object) => any,\n    filteredModel:      null | Map<Object, *>,\n    folded:             boolean,\n    loading?:           boolean,\n    openerOpts:         { position?: \"none\" | \"left\" | \"right\" },\n    opener?:            Class<React.Component<*, *>>,\n    searched:           boolean\n}\n\ntype TreeViewNodeState = { unfolded: Object[] }\n\n/* Node component */\nclass TreeViewNodeBaseClass extends React.PureComponent<TreeViewNodeProps, TreeViewNodeState> {\n\n    /* Lifecycle & data */\n    node: TreeNode\n    _unmounted: boolean\n    ancestorsMap : Map<Object, Object[]> = new Map()\n\n    state : TreeViewNodeState = {\n        unfolded: []\n    }\n\n    constructor(props: TreeViewNodeProps & TreeNodeInput) {\n        super(props)\n\n        const _props = {\n            get: () => this.props\n        }\n        const _state = {\n            get: () => this.state,\n            set: (s: Object) => this.setState(s)\n        }\n\n        this.node = new TreeNode(\n            _props,\n            {},\n            _state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n\n        if(this.props.model instanceof Array) {\n            this.props.model.forEach(item => item && this.ancestorsMap.set(item, [ ...this.props.ancestors, item ]))\n        }\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.model !== nextProps.model) {\n            if(nextProps.model instanceof Array) {\n                const newMap = new Map()\n                nextProps.model.forEach(item => {\n                    if(!item) return\n                    const lastVal = this.ancestorsMap.get(item)\n                    if(lastVal)\n                        newMap.set(item, lastVal)\n                    else\n                        newMap.set(item, [ ...this.props.ancestors, item ])\n                })\n                this.ancestorsMap = newMap\n            }\n        }\n    }\n\n    /* Rendering */\n\n    renderSubtree(item: Object) {\n        if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n            return null\n\n        let childModel = item[this.props.category]\n        let filteredModel = null\n\n        /* If data has to be retrieved asynchronously */\n        if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n            this.node.unwrapPromise(item)\n        }\n        if(!this.node.isAsync(item)) {\n            childModel = this.props.sort ? childModel.sort(this.props.sort) : childModel\n        }\n        if(this.props.filteredModel) {\n            filteredModel = this.props.filteredModel.get(item)\n        }\n\n        return  (\n            <TreeViewNode\n                { ...(this.props: TreeViewNodeProps) }\n                model={ childModel }\n                filteredModel={ filteredModel }\n                ancestors={ this.ancestorsMap.get(item) || [] }\n                depth={ (this.props.depth || 0) + 1 }\n                folded={ this.node.isFolded(item) }\n                loading={ this.node.isAsync(item) && !this.node.isFolded(item) }>\n            </TreeViewNode>\n        )\n    }\n\n    renderOpener(item: Object, OpenerComponent: Class<React.Component<*, *>> | string) {\n        return position =>\n            (this.node.hasChildren(item) || this.node.isAsync(item)) && this.props.openerOpts.position === position ?\n                <OpenerComponent item={item} className={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n                null\n    }\n\n    render() {\n        const { model, folded, display, unique, loading } = this.props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.props.opener || \"span\"\n        const list = model\n            .filter(m => !this.props.searched || this.props.filteredModel && this.props.filteredModel.has(m))\n            .map((item, idx) => {\n                let result\n                if(typeof display === \"function\") {\n                    result = display(item, this.props)\n                    if(!result) { // item hidden, don't render it\n                        return false\n                    }\n                }\n                return (\n                    <li key={ unique && unique(item) || idx }\n                        className={ this.node.liCss(item) }\n                        { ...this.node.getDragEvents(item) }>\n                        <span className={ this.node.mixCss(\"item\") } onClick={ this.node.onClick(item) }>\n                            { this.renderOpener(item, OpenerComponent)(\"left\") }\n                            { result }\n                            { this.renderOpener(item, OpenerComponent)(\"right\") }\n                        </span>\n                        { this.renderSubtree(item) }\n                    </li>\n                )\n            })\n            .filter(item => item !== false)\n\n        return (\n            <ul className={ this.node.ulCss() }\n                { ...this.node.getDragEvents(null, !this.props.depth) }>\n                { list }\n            </ul>\n        )\n    }\n}\nexport const TreeViewNode = withTransition({ key: props => props.folded || props.loading })(TreeViewNodeBaseClass)\n"]}