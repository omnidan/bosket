{"version":3,"sources":["../../../src/vue/components/TreeViewNode.js"],"names":["array","object","TreeNode","withTransition","TreeViewNodeBase","name","created","_inputs","get","$props","_state","$data","set","key","s","node","_unmounted","$forceUpdate","beforeDestroy","props","data","unfolded","computed","childrenModel","map","Map","model","forEach","hasChildren","item","isAsync","sort","category","rootDragData","rootData","getDragEvents","depth","attrs","draggable","nestPrefix","_","toLowerCase","render","renderSubtree","filteredModel","isFolded","pending","contains","unwrapPromise","ancestors","folded","loading","renderOpener","OpenerComponent","openerOpts","position","mixCss","onOpener","display","opener","list","filter","searched","has","m","idx","rawLiData","liCss","liData","unique","onClick","ulCss","TreeViewNode"],"mappings":"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","file":"TreeViewNode.js","sourcesContent":["import { array, object } from \"@bosket/tools\"\nimport { TreeNode } from \"@bosket/core\"\nimport { withTransition } from \"../traits\"\n\nconst TreeViewNodeBase = {\n    name: \"TreeViewNode\",\n    created() {\n        const _inputs = { get: () => this.$props }\n        const _state = {\n            get: () => this.$data,\n            set: s => {\n                for(const key in s) {\n                    if(key in this.$data) this.$data[key] = s[key]\n                }\n            }\n        }\n        this.node = new TreeNode(\n            _inputs,\n            {},\n            _state,\n            () => { if(!this._unmounted) this.$forceUpdate() }\n        )\n    },\n    beforeDestroy() {\n        this._unmounted = true\n    },\n    props: [ \"model\", \"category\", \"selection\", \"onSelect\", \"display\", \"strategies\", \"dragndrop\",\n        \"labels\", \"sort\", \"disabled\", \"openerOpts\", \"async\", \"css\", \"folded\", \"transition\",\n        \"unique\", \"loading\", \"depth\", \"ancestors\", \"searched\", \"onSelect\", \"filteredModel\" ],\n    data: () => ({\n        unfolded: []\n    }),\n    computed: {\n        childrenModel() {\n            const map = new Map()\n            this.$props.model.forEach(item => {\n                if(this.node.hasChildren(item) && !this.node.isAsync(item))\n                    map.set(item, this.$props.sort ?\n                        item[this.$props.category].sort(this.$props.sort) :\n                        item[this.$props.category])\n            })\n            return map\n        },\n        rootDragData() {\n            const rootData = this.node.getDragEvents(null, !this.$props.depth)\n            return {\n                attrs: { draggable: rootData.draggable },\n                ...object(rootData).nestPrefix(\"on\", _ => _.toLowerCase())\n            }\n        }\n    },\n    render() {\n        const renderSubtree = item => {\n            if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n                return null\n\n            let filteredModel = null\n\n            /* If data has to be retrieved asynchronously */\n            if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n                this.node.unwrapPromise(item)\n            }\n            if(this.$props.filteredModel) {\n                filteredModel = this.$props.filteredModel.get(item)\n            }\n\n            const data = {\n                props: {\n                    ...this.$props,\n                    model: this.childrenModel.get(item),\n                    filteredModel: filteredModel,\n                    ancestors: [ ...this.$props.ancestors, item ],\n                    depth: (this.$props.depth || 0) + 1,\n                    folded: this.node.isFolded(item),\n                    loading: this.node.isAsync(item) && !this.node.isFolded(item)\n                }\n            }\n\n            return  (\n                <TreeViewNode { ...data }></TreeViewNode>\n            )\n        }\n\n        const renderOpener = (item, OpenerComponent) => position =>\n            (this.node.hasChildren(item) || this.node.isAsync(item)) && this.$props.openerOpts.position === position ?\n                <OpenerComponent class={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n                null\n\n        const { model, folded, display, loading } = this.$props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.$props.opener || \"span\"\n        const list = model\n            .filter(m => !this.$props.searched || this.$props.filteredModel && this.$props.filteredModel.has(m))\n            .map((item, idx) => {\n                const rawLiData = {\n                    ...this.node.getDragEvents(item),\n                    \"class\": this.node.liCss(item)\n                }\n                const liData = {\n                    attrs: { draggable: rawLiData.draggable },\n                    ...object(rawLiData).nestPrefix(\"on\", _ => _.toLowerCase())\n                }\n                if(this.$props.unique)\n                    liData.key = this.$props.unique(item, idx)\n                return <li { ...liData }>\n                    <span class={ this.node.mixCss(\"item\") } onClick={ this.node.onClick(item) }>\n                        { renderOpener(item, OpenerComponent)(\"left\") }\n                        { display && display(item, this.$props) }\n                        { renderOpener(item, OpenerComponent)(\"right\") }\n                    </span>\n                    { renderSubtree(item) }\n                </li>\n            })\n\n        return (\n            <ul class={ this.node.ulCss() } { ...this.rootDragData }>\n                { list }\n            </ul>\n        )\n    }\n}\n\nexport const TreeViewNode = withTransition({ key: props => props.folded || props.loading })(TreeViewNodeBase)\n"]}